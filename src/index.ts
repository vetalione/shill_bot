import { Bot, GrammyError, Context, InputFile, InlineKeyboard } from "grammy";
import "dotenv/config";
import { generateGeminiImage, generatePromoMessage } from "./providers/gemini.js";
import { isGroupChat, isPrivateChat, extractBotMention, validatePrompt, formatError, formatGeminiError, log } from "./utils.js";
import { uploadImageToFirebase, createTwitterCard as createTwitterCardPage } from "./services/firebase.js";
import sharp from 'sharp';

// Image caching system for lazy Firebase upload
interface CachedImage {
  originalBuffer: Buffer;
  compressedBuffer: Buffer;
  filename: string;
  firebaseUrl?: string; // Uploaded only when needed
}

const imageCache = new Map<string, CachedImage>();

// Lazy Firebase upload - uploads only when needed
async function ensureFirebaseUpload(messageId: string): Promise<string | null> {
  const cached = imageCache.get(messageId);
  if (!cached) {
    console.log(`‚ùå No cached image found for ${messageId}`);
    return null;
  }

  // If already uploaded, return existing URL
  if (cached.firebaseUrl) {
    console.log(`‚úÖ Using cached Firebase URL for ${messageId}`);
    return cached.firebaseUrl;
  }

  // Upload compressed image to Firebase
  try {
    console.log(`üîÑ Lazy uploading image to Firebase for ${messageId}`);
    const firebaseUrl = await uploadImageToFirebase(cached.compressedBuffer, cached.filename);
    
    // Cache the URL for future use
    cached.firebaseUrl = firebaseUrl;
    firebaseImageUrls[messageId] = firebaseUrl;
    
    console.log(`‚úÖ Lazy upload complete: ${firebaseUrl}`);
    return firebaseUrl;
  } catch (error) {
    console.error(`‚ùå Lazy upload failed for ${messageId}:`, error);
    return null;
  }
}

// Compress image for optimal Telegram sharing
async function compressImageForTelegram(imageBuffer: Buffer): Promise<Buffer> {
  console.log(`üóúÔ∏è Compressing image for Telegram inline sharing...`);
  const compressedBuffer = await sharp(imageBuffer)
    .resize(1024, 1024, { 
      fit: 'inside', 
      withoutEnlargement: true 
    })
    .jpeg({ 
      quality: 85,
      mozjpeg: true 
    })
    .toBuffer();
  
  const originalSize = Math.round(imageBuffer.length / 1024);
  const compressedSize = Math.round(compressedBuffer.length / 1024);
  console.log(`üìè Image size: ${originalSize}KB ‚Üí ${compressedSize}KB`);
  
  return compressedBuffer;
}

// Twitter Card creation function
async function createTwitterCardLegacy(shareData: {imageUrl: string, title: string, description: string, twitterText: string}): Promise<string> {
  try {
    // In production, this would call your Firebase Functions or web service
    // For now, we'll create a simple encoded URL
    const encodedData = Buffer.from(JSON.stringify(shareData)).toString('base64url');
    const firebaseWebAppUrl = process.env.FIREBASE_WEB_APP_URL || 'https://your-project.web.app';
    return `${firebaseWebAppUrl}/twitter/${encodedData}`;
  } catch (error) {
    log(`‚ùå Error creating Twitter card: ${error}`);
    // Fallback to direct image URL
    return shareData.imageUrl;
  }
}

// Simple in-memory storage for user points and promo messages (in production use database)
const userPoints: Record<string, number> = {};
const promoMessages: Record<string, string> = {};
const firebaseImageUrls: Record<string, string> = {};
let messageIdCounter = 1;

function addPoints(userId: string, points: number): number {
  if (!userPoints[userId]) {
    userPoints[userId] = 0;
  }
  userPoints[userId] += points;
  return userPoints[userId];
}

function getLeaderboard(): Array<{name: string, points: number}> {
  return Object.entries(userPoints)
    .map(([userId, points]) => ({
      name: `User ${userId}`, // In production, get real names
      points
    }))
    .sort((a, b) => b.points - a.points)
    .slice(0, 10);
}

function createSharingButtons(promoText: string, cachedMessageId: string): InlineKeyboard {
  // Store promo message for sharing
  promoMessages[cachedMessageId] = promoText;
  
  // Create Twitter version of the message
  let twitterVersion = promoText
    .replace(/üí¨ \[Telegram\]\(https:\/\/t\.me\/pepemp3\) ‚Ä¢ üê¶ \[X\/Twitter\]\(https:\/\/x\.com\/pepegotavoice\)/, '@PEPEGOTAVOICE')
    .replace(/\n\nüí¨.*$/, '\n\n@PEPEGOTAVOICE');
  
  // Clean up Markdown formatting for Twitter
  twitterVersion = twitterVersion
    .replace(/\*\*(.*?)\*\*/g, '$1')  // Remove bold **text**
    .replace(/\*(.*?)\*/g, '$1')      // Remove italic *text*
    .replace(/\[(.*?)\]\(.*?\)/g, '$1') // Remove links [text](url)
    .replace(/`(.*?)`/g, '$1')        // Remove code `text`
    .trim();
  
  // Ensure text fits Twitter's 280 character limit
  if (twitterVersion.length > 250) { // Leave some space for hashtags
    twitterVersion = twitterVersion.substring(0, 240) + '... @PEPEGOTAVOICE';
  }
  
  // Create Twitter Intent URL (Twitter Cards will be handled when user clicks)
  const encodedText = encodeURIComponent(twitterVersion);
  let twitterUrl = `https://twitter.com/intent/tweet?text=${encodedText}`;
  
  // Fallback for very long URLs
  if (twitterUrl.length > 2000) {
    const fallbackText = `üê∏ Check out $PEPE.MP3 - AI-generated Pepe memes! @PEPEGOTAVOICE #TON #PepeMP3`;
    twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(fallbackText)}`;
  }
  
  // Use Switch Inline Query for Telegram sharing (will trigger lazy Firebase upload)
  return new InlineKeyboard()
    .switchInline('ü´Ç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', `share:${cachedMessageId}`)
    .row()
    .url('üê¶ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Twitter', twitterUrl);
}

// Bot configuration
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
if (!BOT_TOKEN) {
  throw new Error("TELEGRAM_BOT_TOKEN environment variable is required");
}

const bot = new Bot(BOT_TOKEN);

// Error handling
bot.catch((err) => {
  const e = err.error;
  if (e instanceof GrammyError) {
    log(`Error in request: ${e.description}`, "error");
  } else {
    log(`Unknown error: ${e}`, "error");
  }
});

// Mood system data
const predefinedMoods = [
  // English moods
  "cheerful", "rich", "cool", "angry", "sad", "emotionless",
  
  // Russian moods  
  "–≤–µ—Å–µ–ª—ã–π", "–±–æ–≥–∞—Ç—ã–π", "–∫—Ä—É—Ç–æ–π", "–∑–ª–æ–π", "–≥—Ä—É—Å—Ç–Ω—ã–π", "–±–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"
];

function getRandomMood(): string {
  return predefinedMoods[Math.floor(Math.random() * predefinedMoods.length)];
}

function extractMoodFromPrompt(prompt: string): string | null {
  const promptLower = prompt.toLowerCase();
  
  // Define mood synonyms for better recognition
  const moodSynonyms: Record<string, string[]> = {
    "cheerful": ["happy", "joyful", "cheerful"],
    "–≤–µ—Å–µ–ª—ã–π": ["—Å—á–∞—Å—Ç–ª–∏–≤—ã–π", "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π", "–≤–µ—Å–µ–ª—ã–π"],
    "rich": ["wealthy", "rich", "expensive"],
    "–±–æ–≥–∞—Ç—ã–π": ["–±–æ–≥–∞—Ç—ã–π", "—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π", "–¥–µ–Ω–µ–∂–Ω—ã–π"],
    "cool": ["cool", "awesome", "stylish"],
    "–∫—Ä—É—Ç–æ–π": ["–∫—Ä—É—Ç–æ–π", "–∫–ª–∞—Å—Å–Ω—ã–π", "—Å—Ç–∏–ª—å–Ω—ã–π"],
    "angry": ["angry", "mad", "furious"],
    "–∑–ª–æ–π": ["–∑–ª–æ–π", "—Å–µ—Ä–¥–∏—Ç—ã–π", "—Ä–∞–∑—ä—è—Ä–µ–Ω–Ω—ã–π"],
    "sad": ["sad", "depressed", "melancholy"],
    "–≥—Ä—É—Å—Ç–Ω—ã–π": ["–≥—Ä—É—Å—Ç–Ω—ã–π", "–ø–µ—á–∞–ª—å–Ω—ã–π", "—É–Ω—ã–ª—ã–π"],
    "emotionless": ["emotionless", "neutral", "blank"],
    "–±–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π": ["–±–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–ø—É—Å—Ç–æ–π"]
  };
  
  // Check for direct matches or synonyms
  for (const [baseMood, synonyms] of Object.entries(moodSynonyms)) {
    if (synonyms.some(synonym => promptLower.includes(synonym))) {
      return baseMood;
    }
  }
  
  return null;
}

function buildPepePrompt(userPrompt: string, mood: string): string {
  return `Create a high-quality 3D render of Pepe the Frog with large glossy eyes, wearing a holographic jacket and neon headphones. Style: synthwave + vaporwave aesthetic, minimalism. Bright neon colors, glossy reflections, Pixar animation style.

Scene: ${userPrompt}
Mood: ${mood}

Ensure Pepe is the main character and maintain the iconic frog appearance with the signature aesthetic.`;
}

// Commands
bot.command("start", async (ctx) => {
  const welcomeMessage = `üê∏ –ü—Ä–∏–≤–µ—Ç! –Ø ShillBot - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Pepe —Å –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è $PEPE.MP3!

üé® **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å Pepe
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "Pepe –∏–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—ã" –∏–ª–∏ "Pepe coding"
‚Ä¢ –Ø —Å–æ–∑–¥–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à—ç—Ä–∏–Ω–≥–∞

üéØ **–°–∏—Å—Ç–µ–º–∞ –±–∞–ª–ª–æ–≤:**
‚Ä¢ ü´Ç Telegram: +1 –±–∞–ª–ª (–ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)
‚Ä¢ üê¶ Twitter: +2 –±–∞–ª–ª–∞ (–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–≤–∏—Ç)
‚Ä¢ /leaderboard - —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤

üì± **–ö–∞–∫ –¥–µ–ª–∏—Ç—å—Å—è:**
‚Ä¢ **Telegram:** –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π ‚Üí "–ü–µ—Ä–µ—Å–ª–∞—Ç—å"
‚Ä¢ **Twitter:** –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Üí –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π —Ç–≤–∏—Ç ‚Üí "Tweet"

üåü **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /moods - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π  
‚Ä¢ /promo - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "–≥—Ä—É—Å—Ç–Ω—ã–π Pepe" –∏–ª–∏ "happy Pepe cooking"!`;

  await ctx.reply(welcomeMessage);
});

bot.command("moods", async (ctx) => {
  const message = `üé≠ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:**

üá∫üá∏ **English:** cheerful, rich, cool, angry, sad, emotionless
üá∑üá∫ **–†—É—Å—Å–∫–∏–π:** –≤–µ—Å–µ–ª—ã–π, –±–æ–≥–∞—Ç—ã–π, –∫—Ä—É—Ç–æ–π, –∑–ª–æ–π, –≥—Ä—É—Å—Ç–Ω—ã–π, –±–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ –ª—é–±–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –≤–∞—à –∑–∞–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–∏–º–µ—Ä: "cool Pepe at work" –∏–ª–∏ "–≥—Ä—É—Å—Ç–Ω—ã–π Pepe –¥–æ–º–∞"
‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è –≤—ã–±–µ—Ä—É —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!`;

  await ctx.reply(message, { parse_mode: "Markdown" });
});

bot.command("promo", async (ctx) => {
  try {
    const language = /[–∞-—è—ë]/i.test(ctx.message?.text || '') ? 'ru' : 'en';
    const promo = await generatePromoMessage(language);
    
    // Create temporary messageId for promo-only sharing
    const promoMessageId = `promo${Date.now()}`;
    
    // Create sharing buttons for the promo message
    const sharingButtons = createSharingButtons(promo, promoMessageId);
    
    await ctx.reply(promo, { 
      parse_mode: "Markdown",
      reply_markup: sharingButtons
    });
  } catch (error) {
    log(`Error generating promo: ${error}`, "error");
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// Main image generation handler
bot.on("message:text", async (ctx) => {
  const prompt = ctx.message.text;
  const isGroup = isGroupChat(ctx);
  const isPrivate = isPrivateChat(ctx);

  // Skip if it's a group and bot is not mentioned
  if (isGroup && !extractBotMention(prompt, bot.botInfo.username)) {
    return;
  }

  // Extract clean prompt (remove bot mention if present)
  const cleanPrompt = extractBotMention(prompt, bot.botInfo.username) || prompt;
  
  // Validate prompt
  const validation = validatePrompt(cleanPrompt);
  if (!validation.isValid) {
    await ctx.reply(`‚ùå ${validation.error}`, {
      reply_to_message_id: ctx.message.message_id
    });
    return;
  }

  await generateAndReply(ctx, cleanPrompt, ctx.message.message_id);
});

async function generateAndReply(ctx: Context, userPrompt: string, replyToMessageId?: number) {
  // Send "generating" message
  const generatingMessage = await ctx.reply("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Pepe...", {
    reply_to_message_id: replyToMessageId
  });
  
  try {
    log(`Generating image for prompt: "${userPrompt}"`);

    // Better language detection for promo generation
    const containsCyrillic = /[–∞-—è—ë]/i.test(userPrompt);
    const language = containsCyrillic ? 'ru' : 'en';
    
    log(`Detected language: ${language} for prompt: "${userPrompt}"`);

    // Extract or assign mood
    let mood = extractMoodFromPrompt(userPrompt);
    if (!mood) {
      mood = getRandomMood();
    }
    
    log(`Selected mood: ${mood}`);

    // Create enhanced prompt with Pepe style and mood
    const enhancedPrompt = buildPepePrompt(userPrompt, mood);

    // Generate image and promo message in parallel
    const [imageBuffer, promoMessage] = await Promise.all([
      generateGeminiImage({ prompt: enhancedPrompt }),
      generatePromoMessage(language)
    ]);

    // Check if image was generated successfully
    if (!imageBuffer) {
      throw new Error("Failed to generate image");
    }

    // Compress image and store in cache for lazy Firebase upload
    const filename = `pepe_${Date.now()}_${Math.random().toString(36).substring(2)}.jpg`;
    const messageId = `msg${messageIdCounter++}`;
    
    try {
      // Compress image immediately
      const compressedBuffer = await compressImageForTelegram(Buffer.from(imageBuffer));
      
      // Store in cache for lazy upload
      imageCache.set(messageId, {
        originalBuffer: Buffer.from(imageBuffer),
        compressedBuffer: compressedBuffer,
        filename: filename
        // firebaseUrl will be set when uploaded lazily
      });
      
      console.log(`ÔøΩ Image cached for lazy upload: ${messageId}`);
      
    } catch (error) {
      log(`‚ùå Image compression failed: ${error}`);
      // Continue without caching - sharing will work but without optimization
    }

    // Create sharing buttons (Firebase upload will happen lazily)
    const sharingButtons = promoMessage ? createSharingButtons(promoMessage, messageId) : undefined;
    
    // Delete the "generating" message
    if (ctx.chat) {
      await ctx.api.deleteMessage(ctx.chat.id, generatingMessage.message_id).catch(() => {
        // Ignore errors if message already deleted or too old
      });
    }

    // Send image with promo message and sharing buttons
    await ctx.replyWithPhoto(new InputFile(imageBuffer), {
      caption: promoMessage,
      parse_mode: "Markdown",
      reply_to_message_id: replyToMessageId,
      reply_markup: sharingButtons
    });

    log(`Successfully generated image and promo for: "${userPrompt}" (language: ${language}, mood: ${mood})`);

  } catch (error) {
    log(`Error generating content: ${error}`, "error");
    
    // Delete the "generating" message on error too
    if (ctx.chat) {
      await ctx.api.deleteMessage(ctx.chat.id, generatingMessage.message_id).catch(() => {
        // Ignore errors if message already deleted
      });
    }
    
    const errorMessage = error instanceof Error ? 
      formatGeminiError(error.message) : 
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
    
    await ctx.reply(errorMessage, {
      reply_to_message_id: replyToMessageId
    });
  }
}

// Handle callback queries (button clicks)
bot.on("callback_query:data", async (ctx) => {
  const data = ctx.callbackQuery.data;
  const userId = ctx.from.id.toString();
  const userName = ctx.from.first_name || ctx.from.username || "Unknown";
  
  // Legacy handler for old Twitter confirmation buttons (can be removed later)
  if (data === "twitter_confirmed") {
    await ctx.answerCallbackQuery({
      text: "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!",
      show_alert: false
    });
  }
});

// Handle inline queries (for sharing content)
bot.on("inline_query", async (ctx) => {
  const query = ctx.inlineQuery.query;
  
  console.log(`üîç Inline query received: "${query}"`);
  
  // Handle sharing queries
  if (query.startsWith("share:")) {
    const messageId = query.split("share:")[1];
    const promoMessage = promoMessages[messageId];
    
    console.log(`üìù Found promo message for ${messageId}:`, !!promoMessage);
    
    if (!promoMessage) {
      console.log(`‚ùå Message ${messageId} not found in storage`);
      console.log(`üìã Available messages:`, Object.keys(promoMessages));
      await ctx.answerInlineQuery([
        {
          type: "article",
          id: "not_found",
          title: "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
          description: "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —à–µ—Ä–∏–Ω–≥–∞",
          input_message_content: {
            message_text: "üê∏ **ShillBot** - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Pepe\n\nüé® –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å Pepe!\n\nüí¨ [Telegram](https://t.me/pepemp3) ‚Ä¢ üê¶ [X/Twitter](https://x.com/pepegotavoice)",
            parse_mode: "Markdown"
          }
        }
      ]);
      return;
    }

    // Try to get Firebase URL (lazy upload if needed)
    const firebaseImageUrl = await ensureFirebaseUpload(messageId);
    
    if (firebaseImageUrl) {
      // Return photo result with promo message
      console.log(`üì∏ Returning photo result with caption`);
      console.log(`üîó Image URL: ${firebaseImageUrl}`);
      
      await ctx.answerInlineQuery([
        {
          type: "photo",
          id: `share_${messageId}`,
          photo_url: firebaseImageUrl,
          thumbnail_url: firebaseImageUrl,
          title: "üê∏ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è Pepe –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
          description: "AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Pepe —Å –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ–º",
          caption: promoMessage,
          parse_mode: "Markdown"
        }
      ], {
        cache_time: 1,
        is_personal: true
      });
    } else {
      // Fallback to text-only if no image or upload failed
      console.log(`üìù Returning text-only result (no image available)`);
      await ctx.answerInlineQuery([
        {
          type: "article",
          id: `share_text_${messageId}`,
          title: "üê∏ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ–º",
          description: "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ $PEPE.MP3",
          input_message_content: {
            message_text: promoMessage,
            parse_mode: "Markdown"
          }
        }
      ], {
        cache_time: 1,
        is_personal: true
      });
    }
    return;
  }
  
  // Default inline query response
  await ctx.answerInlineQuery([
    {
      type: "article",
      id: "default",
      title: "ü§ñ ShillBot - AI Pepe Generator",
      description: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Pepe",
      input_message_content: {
        message_text: "üê∏ **ShillBot** - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Pepe\n\nüé® –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å Pepe!\n\nüí¨ [Telegram](https://t.me/pepemp3) ‚Ä¢ üê¶ [X/Twitter](https://x.com/pepegotavoice)",
        parse_mode: "Markdown"
      }
    }
  ]);
});

// Leaderboard command
bot.command("leaderboard", async (ctx) => {
  const leaderboard = getLeaderboard();
  
  if (leaderboard.length === 0) {
    await ctx.reply("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞! –ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏!");
    return;
  }
  
  let message = "üèÜ **–¢–æ–ø-10 –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –æ—á–∫–∞–º:**\n\n";
  
  for (let i = 0; i < leaderboard.length; i++) {
    const { name, points } = leaderboard[i];
    const position = i + 1;
    const medal = position === 1 ? "ü•á" : position === 2 ? "ü•à" : position === 3 ? "ü•â" : "üìç";
    message += `${medal} ${position}. ${name}: **${points}** –æ—á–∫–æ–≤\n`;
  }
  
  message += "\nüí° –î–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!";
  
  await ctx.reply(message, { parse_mode: "Markdown" });
});

// Start the bot
log("ShillBot is running...");
bot.start();